diff --git a/exists/analysis.text b/exists/analysis.text
new file mode 100644
index 00000000..af30296f
--- /dev/null
+++ b/exists/analysis.text
@@ -0,0 +1,279 @@
+Here are the portions of the SPARQL 1.1 Query specification relevant to the
+definition of EXISTS, as far as I can tell.  
+
+
+From 18.2.2.2 Collect FILTER Elements
+
+FILTER expressions apply to the whole group graph pattern in which they
+appear. The algebra operators to perform filtering are added to the group
+after translation of each group element. We collect the filters together
+here and remove them from group, then apply them to the whole translated
+group graph pattern. 
+
+In this step, we also translate graph patterns within FILTER expressions
+EXISTS and NOT EXISTS. 
+
+Let FS := empty set
+
+For each form FILTER(expr) in the group graph pattern:
+    In expr, replace NOT EXISTS{P} with fn:not(exists(translate(P))) 
+    In expr, replace EXISTS{P} with exists(translate(P))
+    FS := FS ∪ {expr}
+    End
+
+
+18.5 SPARQL Algebra
+
+Definition: Exists
+
+exists(pattern) is a function that returns true if the pattern evaluates to
+a non-empty solution sequence, given the current solution mapping and active
+graph at the time of evaluation; otherwise it returns false.
+
+
+From 18.6 Evaluation Semantics
+
+'substitute' is a filter function in support of the evaluation of EXISTS and
+NOT EXISTS forms which were translated to exists. 
+
+Definition: Substitute
+
+Let μ be a solution mapping.
+substitute(pattern, μ) = the pattern formed by replacing every occurrence of
+a variable v in pattern by μ(v) for each v in dom(μ) 
+
+Definition: Evaluation of Exists
+
+Let μ be the current solution mapping for a filter and P a graph pattern:
+The value exists(P), given D(G) is true if and only if eval(D(G),
+substitute(P, μ)) is a non-empty sequence.  
+
+
+
+The purpose of existsScope01 is to explore what happens with a BIND to a
+variable that is in the solution mapping that goes into the EXISTS.
+
+The query is
+  SELECT ?x WHERE {
+    ?x :p :b .
+    FILTER EXISTS { BIND ( :j AS ?x ) }
+  }
+This query is syntactically correct.
+
+The EXISTS argument is translated to
+  exists( Extend(E, x, :j) )
+where E is the empty pattern.
+
+The FILTER is evaluated with the multiset of solution mappings
+  { { ( x , :b ) } }
+so the result of the substitute part of the evaluation is
+  Extend(E, :b, :j)
+Evaluating Extend evaluates E, which results in an empty multiset, and then
+adds in a mapping for :b, which results in
+  { { ( :b , :j ) } }
+
+This is not a multiset of solution mappings, so something has gone wrong.
+It doesn't look like an error but it is something that SPARQL
+implementations probably should not accept.  Even so, the multiset is not
+empty so the exists evaluates to true and the result of the query is
+  { { ( x , :b ) } }
+
+Even in this very simple exmple, there is a problem with EXISTS.
+
+
+The purpose of existsScope02 is to further explore what happens with BIND.
+The query is
+  SELECT ?x WHERE {
+    ?x :p ?y .
+    FILTER EXISTS { BIND ( :j AS ?x )
+                    BIND ( :k AS ?y ) }
+  }
+The EXISTS is translated to
+  Extend( Extend(E, ?x, :j), y, :k )
+which after substitution is
+  Extend( Extend(E, :b, :j), :b, :k )
+The outer Extend tries to override an existing binding.  That result is
+explicitly undefined so it is not possible to proceed further.
+
+
+The purpose of existsValues01 and existsValues02 is to explore what happens
+with VALUES that use variables that are in the solution mapping.
+
+The EXISTS arguments are
+  { VALUES (?x) { ( :c ) } }
+and 
+  { VALUES (?x) { ( :c ) } VALUES (?y) { ( :d ) } }
+which translated as follows, respectively
+  { { ( ?x, :c ) } }
+and
+  Join( Join( E,   { { ( ?x, :c ) } } ) ,   { { ( y, :d ) } } )
+After substitution they become
+  { { ( :b, :c ) } }
+and
+  Join( Join( E,   { { ( :b, :c ) } } ) ,   { { ( :b, :d ) } } )
+And they evaluate to
+  { { ( :b, :c ) } }
+and
+  { }
+
+Here there is again the problem with illegal multisets of solution mappings,
+but there is also another minor problem that
+  { { ( :b, :c ) } }
+is not explicitly listed as one of the parts of the SPARQL algebra that is a
+Graph Pattern.  One could argue that this means that this violates the
+requirement in the definition of substite that the result is a pattern and
+is another semantic anomaly that should be reported.
+
+
+The purpose of existsBlank is to explore what happens with blank nodes in
+solution mappings.  The query is
+  SELECT ?x WHERE {
+    :s :p ?x .
+    FILTER EXISTS { ?x :p _:a . }
+  }
+The exists argument is translated to
+  BGP( ?x :p _:a )
+The solution sequence in the FILTER is
+  { { ( ?x, _:b ) } }
+The substitution results in
+ BGP( _:b :p _:a )
+which results in a multiset of solution mappings of
+ { { } }
+against the graph 
+  :s :p _:b .
+because _:b in the BGP can be substituted with :s in the RDF instance
+mapping part of the pattern instance mapping.
+Here there are no semantic anomalies at all.
+
+
+The purpose of existsBound is to explore what happens with the BOUND
+function.  [Note: This test was not in the list of tests to run but is now.]
+The EXISTS argument is
+  { FILTER BOUND(?x) }
+which is translated to
+  Filter( BOUND(?x), E )
+Substitution then produces
+  Filter( BOUND(:b), E )
+BOUND is only defined for variables so a type error will always result and
+the Filter will eliminate all solution mappings so the final result is the
+empty multiset.
+
+
+The purpose of existsMinus is to explore what happens with MINUS.
+  { ?x :p :b . MINUS { ?x :p :b } }
+which is translated to
+  Minus( Join(E, BGP( ?x :p :b )), BGP ( ?x :p :b ) )
+Maybe the Join is simplified out, but that doesn't affect the analysis here.
+Substitution results in
+  Minus( Join(E, BGP( :b :p :b )), BGP ( :b :p :b ) )
+Evaluation proceeds to
+  Minus( { { } }, { { } } )
+Which is
+  { { } }
+because the solution bindings have disjoint domains.
+Finally, the result of the query is
+  { { ( ?x, :b ) } }
+
+
+The purpose of the other tests is to explore what happens with subqueries.
+Many of them are similar or mirror examples from above, so only a few are
+analyzed here.
+
+The purpose of existsSubquery01 is to analyze what happens with connected
+variables.  The query is
+  SELECT ?x WHERE {
+    ?x :p :b .
+    FILTER EXISTS { SELECT ?x WHERE { ?x :p :b . } }
+  }
+The translation of the EXISTS argument is
+  ToMultiSet( Project(BGP(?x :p :b),{?x}) )
+After translation this is 
+  ToMultiSet( Project(BGP(:b :p :b),{:b}) )
+ToMultiSet is not listed as a Graph Pattern symbol in the SPARQL algebra so
+there is an argument to be made that this is a semantic anomaly that needs
+to be reported.  Also, the second argument to Project is not a set of
+variables so the definition of Project has to be expanded.
+The resulting multiset if these semantic anomalies are ignored is
+  { { } }
+which produces a result for the query of
+  { { ( ?x, :b ) } }
+
+Note that if the query is changed to 
+  SELECT ?x WHERE {
+    ?x :p :b .
+    FILTER EXISTS { { SELECT ?x WHERE { ?x :p :b . } BIND ( :k AS ?k ) } }
+  }
+Then the argument to and result of substitute will both definitely be
+acceptable so it is not sufficient to argue that substitute needs to be
+changed if its argument or result is not a graph pattern.
+
+The purpose of existsSubquery04 is to analyze what happens with disconnected
+variables.  The query is
+  SELECT ?x WHERE {
+    ?x :a ?y .
+    FILTER EXISTS { SELECT ?z WHERE { ?z :f ?y . } }
+  }
+The translation of the EXISTS argument is
+  ToMultiSet(Project(BGP(?z :f ?y),{?z}))
+and the substitution result is
+  ToMultiSet(Project(BGP(?z :f :b),{?z}))
+The BGP has no matches so the result of this is
+  { }
+so the result of the entire query is
+  { }
+
+The purpose of existsSubquery07 is to analyze what happens with connected
+variables that are set up with expresions.  The query is
+  SELECT ?x WHERE {
+    ?x :p :b .
+    FILTER EXISTS { ?x :p :b .
+                    { SELECT ( :d AS ?x ) WHERE { :b :p :b . } } }
+  }
+The translation of the EXISTS argument is
+  Join( Join( E, BGP(?x :p :b) ),
+        ToMultiSet( Project( Extend( BGP( :b :p :b ), ?x, :d ), {?x} ) ) )
+After substitution this is
+  Join( Join( E, BGP(:b :p :b) ),
+        ToMultiSet( Project( Extend( BGP( :b :p :b ), :b, :d ), {:b} ) ) )
+Both the Extend and the Project have semantic anomalies here.  In the end
+the result is
+  { { ( :b, :d ) } }
+and the query produces
+  { { ( ?x, :b ) } }
+
+
+The purpose of existsSubquery10 (new test) is to analyze the interaction
+between FILTER variables and connected variables with different mappings in
+subqueries.  The query is
+  SELECT ?x WHERE {
+    BIND ( :b AS ?x )
+    FILTER EXISTS { SELECT ( :d AS ?x ) WHERE { } }
+  }
+The translation of the EXISTS argument is
+  ToMultiSet( Project( Extend( E, ?x, :d ) ) )
+After substitution this is
+  ToMultiSet( Project( Extend( E, :b, :d ) ) )
+This results in the (illegal) multiset of solution mappings
+  { { ( :b, :d ) } }
+so the query results in
+  { { ( ?x, :b) } }
+
+The purpose of existsSubquery11 (new test) is to further analyze the
+interaction between FILTER variables and connected variables with different
+mappings in subqueries.  The query is
+  SELECT ?x WHERE {
+    BIND ( :b AS ?x )
+    BIND ( :b AS ?y )
+    FILTER EXISTS { { SELECT ( :d AS ?x ) WHERE { } }
+  	 	  { SELECT ( :e AS ?y ) WHERE { } } }
+  }
+The translation of the EXISTS argument is
+  Join( Join( E, ToMultiSet( Project( Extend( E, ?x, :d ) ) ) )
+  	ToMultiSet( Project( Extend( E, ?y, :e ) ) ) )
+After substitution this is
+  Join( Join( E, ToMultiSet( Project( Extend( E, :b, :d ) ) ) )
+  	ToMultiSet( Project( Extend( E, :b, :e ) ) ) )
+This results in (after going through some illegal solution mappings) 
+  { }
+so the query results in
+  { }
diff --git a/exists/existsBlank01.rq b/exists/existsBlank01.rq
new file mode 100644
index 00000000..354b81aa
--- /dev/null
+++ b/exists/existsBlank01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  :s :p ?x .
+  FILTER EXISTS { ?x :p _:a . }
+}
diff --git a/exists/existsBlank01.srx b/exists/existsBlank01.srx
new file mode 100644
index 00000000..f03ae1ef
--- /dev/null
+++ b/exists/existsBlank01.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+<result>
+<binding name='x'><bnode>b</bnode></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsBlank01.ttl b/exists/existsBlank01.ttl
new file mode 100644
index 00000000..5d0d2dea
--- /dev/null
+++ b/exists/existsBlank01.ttl
@@ -0,0 +1,3 @@
+@prefix : <http://www.example.org/> .
+
+:s :p _:b .
diff --git a/exists/existsBound01.rq b/exists/existsBound01.rq
new file mode 100644
index 00000000..9561d0ad
--- /dev/null
+++ b/exists/existsBound01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  :b :p ?x .
+  FILTER EXISTS { FILTER BOUND(?x) }
+}
diff --git a/exists/existsBound01.srx b/exists/existsBound01.srx
new file mode 100644
index 00000000..094b8870
--- /dev/null
+++ b/exists/existsBound01.srx
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+</results>
+</sparql>
diff --git a/exists/existsHernandez01.rq b/exists/existsHernandez01.rq
new file mode 100644
index 00000000..3d6b273e
--- /dev/null
+++ b/exists/existsHernandez01.rq
@@ -0,0 +1,8 @@
+prefix : <http://www.example.org/>
+
+SELECT ?parent WHERE {
+  ?parent :country :j
+  FILTER ( EXISTS { SELECT ?child
+    WHERE { ?child :parent ?parent }
+  } )
+}
\ No newline at end of file
diff --git a/exists/existsHernandez01.srx b/exists/existsHernandez01.srx
new file mode 100644
index 00000000..89657921
--- /dev/null
+++ b/exists/existsHernandez01.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='parent'/>
+</head>
+<results>
+<result>
+<binding name='parent'><uri>http://www.example.org/b</uri></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsHernandez01.ttl b/exists/existsHernandez01.ttl
new file mode 100644
index 00000000..f824d741
--- /dev/null
+++ b/exists/existsHernandez01.ttl
@@ -0,0 +1,9 @@
+@prefix : <http://www.example.org/> .
+
+  :a :country :j .
+  :a :parent :b .
+  :b :country :j .
+  :b :parent :c .
+  :c :parent :d .
+  :c :country :k .
+
diff --git a/exists/existsHernandez02.rq b/exists/existsHernandez02.rq
new file mode 100644
index 00000000..fc1ed4e4
--- /dev/null
+++ b/exists/existsHernandez02.rq
@@ -0,0 +1,10 @@
+prefix : <http://www.example.org/>
+
+SELECT ?parent WHERE {
+  ?parent :country :j
+  FILTER ( EXISTS { SELECT ?child
+    WHERE { ?child :parent ?chparent
+      FILTER (?chparent = ?parent)
+    }
+  } )
+}
diff --git a/exists/existsHernandez02.srx b/exists/existsHernandez02.srx
new file mode 100644
index 00000000..89657921
--- /dev/null
+++ b/exists/existsHernandez02.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='parent'/>
+</head>
+<results>
+<result>
+<binding name='parent'><uri>http://www.example.org/b</uri></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsMinus01.rq b/exists/existsMinus01.rq
new file mode 100644
index 00000000..f2fc7148
--- /dev/null
+++ b/exists/existsMinus01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { ?x :p :b . MINUS { ?x :p :b } }
+}
diff --git a/exists/existsMinus01.srx b/exists/existsMinus01.srx
new file mode 100644
index 00000000..c51e3db6
--- /dev/null
+++ b/exists/existsMinus01.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+<result>
+<binding name='x'><uri>http://www.example.org/b</uri></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsScope01.rq b/exists/existsScope01.rq
new file mode 100644
index 00000000..720ec314
--- /dev/null
+++ b/exists/existsScope01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { BIND ( :j AS ?x ) }
+}
diff --git a/exists/existsScope01.srx b/exists/existsScope01.srx
new file mode 100644
index 00000000..8ff038ae
--- /dev/null
+++ b/exists/existsScope01.srx
@@ -0,0 +1,9 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+<binding name='x'><uri>http://www.example.org/b</uri></binding>
+</results>
+</sparql>
diff --git a/exists/existsScope02.rq b/exists/existsScope02.rq
new file mode 100644
index 00000000..4bc08c70
--- /dev/null
+++ b/exists/existsScope02.rq
@@ -0,0 +1,7 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p ?y .
+  FILTER EXISTS { BIND ( :j AS ?x )
+                  BIND ( :k AS ?y ) }
+}
diff --git a/exists/existsSubquery01.rq b/exists/existsSubquery01.rq
new file mode 100644
index 00000000..75c99a38
--- /dev/null
+++ b/exists/existsSubquery01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { SELECT ?x WHERE { ?x :p :b . } }
+}
diff --git a/exists/existsSubquery01.srx b/exists/existsSubquery01.srx
new file mode 100644
index 00000000..c51e3db6
--- /dev/null
+++ b/exists/existsSubquery01.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+<result>
+<binding name='x'><uri>http://www.example.org/b</uri></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsSubquery02.rq b/exists/existsSubquery02.rq
new file mode 100644
index 00000000..1cea6ed5
--- /dev/null
+++ b/exists/existsSubquery02.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { { SELECT ?x WHERE { ?x :p :b . } } }
+}
diff --git a/exists/existsSubquery03.rq b/exists/existsSubquery03.rq
new file mode 100644
index 00000000..ee7b121d
--- /dev/null
+++ b/exists/existsSubquery03.rq
@@ -0,0 +1,7 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p ?y .
+  FILTER EXISTS { { SELECT ?x WHERE { ?x :p :b . } }
+  	 	  { SELECT ?y WHERE { :b ?y :b . } } }
+}
diff --git a/exists/existsSubquery03.srx b/exists/existsSubquery03.srx
new file mode 100644
index 00000000..094b8870
--- /dev/null
+++ b/exists/existsSubquery03.srx
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+</results>
+</sparql>
diff --git a/exists/existsSubquery04.rq b/exists/existsSubquery04.rq
new file mode 100644
index 00000000..1e6a2aff
--- /dev/null
+++ b/exists/existsSubquery04.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :a ?y .
+  FILTER EXISTS { SELECT ?z WHERE { ?z :f ?y . } }
+}
diff --git a/exists/existsSubquery04.srx b/exists/existsSubquery04.srx
new file mode 100644
index 00000000..094b8870
--- /dev/null
+++ b/exists/existsSubquery04.srx
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+</results>
+</sparql>
diff --git a/exists/existsSubquery04.ttl b/exists/existsSubquery04.ttl
new file mode 100644
index 00000000..622dcdbf
--- /dev/null
+++ b/exists/existsSubquery04.ttl
@@ -0,0 +1,4 @@
+@prefix : <http://www.example.org/> .
+
+:d :a :b .
+:g :f :h .
diff --git a/exists/existsSubquery05.rq b/exists/existsSubquery05.rq
new file mode 100644
index 00000000..42bf2bc9
--- /dev/null
+++ b/exists/existsSubquery05.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :a ?y .
+  FILTER EXISTS { { SELECT ?z WHERE { ?z :f ?y . } } }
+}
diff --git a/exists/existsSubquery06.rq b/exists/existsSubquery06.rq
new file mode 100644
index 00000000..3f957a2e
--- /dev/null
+++ b/exists/existsSubquery06.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { { SELECT ( :d AS ?x ) WHERE { :b :p :b . } } }
+}
diff --git a/exists/existsSubquery07.rq b/exists/existsSubquery07.rq
new file mode 100644
index 00000000..2ea98459
--- /dev/null
+++ b/exists/existsSubquery07.rq
@@ -0,0 +1,7 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { ?x :p :b .
+                  { SELECT ( :d AS ?x ) WHERE { :b :p :b . } } }
+}
diff --git a/exists/existsSubquery08.rq b/exists/existsSubquery08.rq
new file mode 100644
index 00000000..af04e432
--- /dev/null
+++ b/exists/existsSubquery08.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { SELECT ?x WHERE { FILTER BOUND(?x) } }
+}
diff --git a/exists/existsSubquery09.rq b/exists/existsSubquery09.rq
new file mode 100644
index 00000000..976518fa
--- /dev/null
+++ b/exists/existsSubquery09.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p ?y .
+  FILTER EXISTS { SELECT ?x WHERE { ?x :p ?y . } GROUP BY ?x HAVING ( COUNT(*) > 1 ) }
+}
diff --git a/exists/existsSubquery09.ttl b/exists/existsSubquery09.ttl
new file mode 100644
index 00000000..3f9f7add
--- /dev/null
+++ b/exists/existsSubquery09.ttl
@@ -0,0 +1,4 @@
+@prefix : <http://www.example.org/> .
+
+:b :p :b .
+:b :p :c .
diff --git a/exists/existsSubquery10.rq b/exists/existsSubquery10.rq
new file mode 100644
index 00000000..70c10adf
--- /dev/null
+++ b/exists/existsSubquery10.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  BIND ( :b AS ?x )
+  FILTER EXISTS { SELECT ( :d AS ?x ) WHERE { } }
+}
diff --git a/exists/existsSubquery11.rq b/exists/existsSubquery11.rq
new file mode 100644
index 00000000..c80e065c
--- /dev/null
+++ b/exists/existsSubquery11.rq
@@ -0,0 +1,8 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  BIND ( :b AS ?x )
+  BIND ( :b AS ?y )
+  FILTER EXISTS { { SELECT ( :d AS ?x ) WHERE { } }
+  	 	  { SELECT ( :e AS ?y ) WHERE { } } }
+}
diff --git a/exists/existsValues01.rq b/exists/existsValues01.rq
new file mode 100644
index 00000000..abbc5cee
--- /dev/null
+++ b/exists/existsValues01.rq
@@ -0,0 +1,6 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :b .
+  FILTER EXISTS { VALUES (?x) { ( :c ) } }
+}
diff --git a/exists/existsValues01.srx b/exists/existsValues01.srx
new file mode 100644
index 00000000..c51e3db6
--- /dev/null
+++ b/exists/existsValues01.srx
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+<result>
+<binding name='x'><uri>http://www.example.org/b</uri></binding>
+</result>
+</results>
+</sparql>
diff --git a/exists/existsValues02.rq b/exists/existsValues02.rq
new file mode 100644
index 00000000..c6ae0146
--- /dev/null
+++ b/exists/existsValues02.rq
@@ -0,0 +1,7 @@
+prefix : <http://www.example.org/>
+
+SELECT ?x WHERE {
+  ?x :p :y .
+  FILTER EXISTS { VALUES (?x) { ( :c ) }
+  	 	  VALUES (?y) { ( :d ) } }
+}
diff --git a/exists/existsValues02.srx b/exists/existsValues02.srx
new file mode 100644
index 00000000..094b8870
--- /dev/null
+++ b/exists/existsValues02.srx
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<sparql xmlns='http://www.w3.org/2005/sparql-results#'>
+<head>
+<variable name='x'/>
+</head>
+<results>
+</results>
+</sparql>
diff --git a/exists/existsbpb.ttl b/exists/existsbpb.ttl
new file mode 100644
index 00000000..955a8ca9
--- /dev/null
+++ b/exists/existsbpb.ttl
@@ -0,0 +1,3 @@
+@prefix : <http://www.example.org/> .
+
+:b :p :b .
diff --git a/exists/manifest.ttl b/exists/manifest.ttl
index f4addfcc..4161a3d7 100644
--- a/exists/manifest.ttl
+++ b/exists/manifest.ttl
@@ -15,6 +15,26 @@
     :exists03
     :exists04
     :exists05
+    :existsBlank01
+    :existsBound01
+    :existsHernandez01
+    :existsHernandez02
+    :existsMinus01
+    :existsScope01
+    :existsScope02
+    :existsSubquery01
+    :existsSubquery02
+    :existsSubquery03
+    :existsSubquery04
+    :existsSubquery05
+    :existsSubquery06
+    :existsSubquery07
+    :existsSubquery08
+    :existsSubquery09
+    :existsSubquery10
+    :existsSubquery11
+    :existsValues01
+    :existsValues02
   ).
 
 
@@ -56,7 +76,7 @@
     .    
    
     
- :exists04 rdf:type mf:QueryEvaluationTest ;
+:exists04 rdf:type mf:QueryEvaluationTest ;
     mf:name "Nested positive exists";
 	mf:feature sparql:exists ;
     dawgt:approval dawgt:Approved;
@@ -79,4 +99,245 @@
           ] ;
     mf:result  <exists05.srx>  
     .           
+
     
+:existsScope01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "BIND in EXISTS to FILTER variable";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect BIND variables" ;
+    rdfs:comment    "Change in-scope to start out with FILTER variables" ;
+    mf:action
+         [ qt:query  <existsScope01.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsScope01.srx>  
+    .           
+
+:existsScope02 rdf:type mf:QueryEvaluationTest ;
+    mf:name "Twin BIND in EXISTS to FILTER variables with same value";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect BIND variables" ;
+    rdfs:comment    "Change in-scope to start out with FILTER variables" ;
+    rdfs:comment    "Explicitly undefined in spec" ;
+    mf:action
+         [ qt:query  <existsScope02.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    .           
+
+:existsValues01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "VALUES in EXISTS for FILTER variable";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect solution mapping variables" ;
+    mf:action
+         [ qt:query  <existsValues01.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsValues01.srx>  
+    .           
+
+:existsValues02 rdf:type mf:QueryEvaluationTest ;
+    mf:name "Twin VALUES in EXISTS for FILTER variables with same value";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect solution mapping variables" ;
+    mf:action
+         [ qt:query  <existsValues02.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsValues02.srx>  
+    .           
+
+:existsSubquery01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with projection to FILTER variable";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An undefined Project is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables in subqueries" ;
+    mf:action
+         [ qt:query  <existsSubquery01.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery01.srx>  
+    .           
+
+:existsSubquery02 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT inside group in EXISTS with projection to FILTER variable";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An undefined Project is generated internally" ;
+    rdfs:comment    "To ensure that the argument to EXISTS is a pattern" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables in subqueries" ;
+    mf:action
+         [ qt:query  <existsSubquery02.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery01.srx>  
+    .           
+
+:existsSubquery03 rdf:type mf:QueryEvaluationTest ;
+    mf:name "Twin SELECT in EXISTS for FILTER variables with same value";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An undefined Project is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables in subqueries" ;
+    mf:action
+         [ qt:query  <existsSubquery03.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery03.srx>  
+    .           
+
+:existsSubquery04 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with disconnected FILTER variable";
+    rdfs:comment    "Change EXISTS to not affect disconnected variables" ;
+	mf:feature sparql:exists ;
+    mf:action
+         [ qt:query  <existsSubquery04.rq> ;
+           qt:data   <existsSubquery04.ttl> ;
+          ] ;
+    mf:result  <existsSubquery04.srx>  
+    .           
+
+:existsSubquery05 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with disconnected FILTER variable";
+	mf:feature sparql:exists ;
+    rdfs:comment    "To ensure that the argument to EXISTS is a pattern" ;
+    rdfs:comment    "Change EXISTS to not affect disconnected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery05.rq> ;
+           qt:data   <existsSubquery04.ttl> ;
+          ] ;
+    mf:result  <existsSubquery04.srx>  
+    .           
+
+:existsSubquery06 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with connected FILTER variable with AS";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery06.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery01.srx>  
+    .           
+
+:existsSubquery07 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with connected FILTER variable with AS";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery07.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery01.srx>  
+    .           
+
+:existsSubquery08 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with connected FILTER variable checking BOUND";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An undefined Project is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery08.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery03.srx>  
+    .           
+
+:existsSubquery09 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with disconnected FILTER variable and grouping";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An undefined Project is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect disconnected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery09.rq> ;
+           qt:data   <existsSubquery09.ttl> ;
+          ] ;
+    mf:result  <existsSubquery04.srx>  
+    .           
+
+:existsSubquery10 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with connected FILTER variable with different value";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery10.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery01.srx>  
+    .           
+
+:existsSubquery11 rdf:type mf:QueryEvaluationTest ;
+    mf:name "SELECT in EXISTS with twin connected FILTER variables with different values";
+	mf:feature sparql:exists ;
+    rdfs:comment    "An illegal solution mapping is generated internally" ;
+    rdfs:comment    "Change EXISTS to not affect connected variables" ;
+    mf:action
+         [ qt:query  <existsSubquery11.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsSubquery04.srx>  
+    .           
+
+:existsBlank01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "EXISTS substitution to blank node";
+	mf:feature sparql:exists ;
+    rdfs:comment "The substituted blank node is further substituted" ;
+    rdfs:comment "Change EXISTS so that mappings to blank nodes don't trigger instance mappings";
+    mf:action
+         [ qt:query  <existsBlank01.rq> ;
+           qt:data   <existsBlank01.ttl> ;
+          ] ;
+    mf:result  <existsBlank01.srx>  
+    .           
+
+:existsBound01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "EXISTS substitution to variable in BOUND";
+	mf:feature sparql:exists ;
+    rdfs:comment "Change EXISTS so that variable status is not affected";
+    mf:action
+         [ qt:query  <existsBound01.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsBound01.srx>  
+    .           
+
+:existsMinus01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "EXISTS substitution that removes shared variable in MINUS";
+	mf:feature sparql:exists ;
+    rdfs:comment "Change EXISTS so that variable status ix not affected";
+    mf:action
+         [ qt:query  <existsMinus01.rq> ;
+           qt:data   <existsbpb.ttl> ;
+          ] ;
+    mf:result  <existsMinus01.srx>  
+    .           
+
+:existsHernandez01 rdf:type mf:QueryEvaluationTest ;
+    mf:name "EXISTS substitution into disconnected variable";
+	mf:feature sparql:exists ;
+    rdfs:comment "Change EXISTS to not affect disconnected variables";
+    rdfs:comment "From https://scirate.com/arxiv/1606.01441" ;
+    mf:action
+         [ qt:query  <existsHernandez01.rq> ;
+           qt:data   <existsHernandez01.ttl> ;
+          ] ;
+    mf:result  <existsHernandez01.srx>  
+    .
+
+:existsHernandez02 rdf:type mf:QueryEvaluationTest ;
+    mf:name "EXISTS substitution into disconnected variable";
+	mf:feature sparql:exists ;
+    rdfs:comment "Change EXISTS to not affect disconnected variables";
+    rdfs:comment "From https://scirate.com/arxiv/1606.01441" ;
+    mf:action
+         [ qt:query  <existsHernandez02.rq> ;
+           qt:data   <existsHernandez01.ttl> ;
+          ] ;
+    mf:result  <existsHernandez01.srx>  
+    .
+
